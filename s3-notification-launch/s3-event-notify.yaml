Resources:
  UploadBucketD2C1DA78:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
            Status: Enabled
      MetricsConfigurations:
        - Id: EntireBucket
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/UploadBucket/Resource
  UploadBucketNotifications5E120ADB:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691
          - Arn
      BucketName:
        Ref: UploadBucketD2C1DA78
      NotificationConfiguration:
        TopicConfigurations:
          - Events:
              - s3:ObjectCreated:*
            TopicArn:
              Ref: UploadBucketTopic6C74B146
    DependsOn:
      - UploadBucketTopicPolicy6F32D507
      - UploadBucketTopic6C74B146
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/UploadBucket/Notifications/Resource
  EmptyBucketEmptyBucketLambdaServiceRole67452BDD:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/EmptyBucket/EmptyBucketLambda/ServiceRole/Resource
  EmptyBucketEmptyBucketLambdaServiceRoleDefaultPolicy0872AADF:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject*
              - s3:Abort*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - UploadBucketD2C1DA78
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - UploadBucketD2C1DA78
                        - Arn
                    - /*
        Version: "2012-10-17"
      PolicyName: EmptyBucketEmptyBucketLambdaServiceRoleDefaultPolicy0872AADF
      Roles:
        - Ref: EmptyBucketEmptyBucketLambdaServiceRole67452BDD
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/EmptyBucket/EmptyBucketLambda/ServiceRole/DefaultPolicy/Resource
  EmptyBucketEmptyBucketLambdaD0E9E93D:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >-
          import os

          import json

          import boto3

          import traceback

          import cfnresponse


          def empty_bucket(event, context):
              bucket_name = os.environ['bucket_name']

              try:
                  if event['RequestType'] == 'Delete':
                      print("empty bucket: " + bucket_name)
                      
                      bucket = boto3.resource('s3').Bucket(bucket_name)
                      bucket.object_versions.delete()

                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception:
                  traceback.print_exc()

                  cfnresponse.send(event, context, cfnresponse.FAILED, {})
      Handler: index.empty_bucket
      Role:
        Fn::GetAtt:
          - EmptyBucketEmptyBucketLambdaServiceRole67452BDD
          - Arn
      Runtime: python3.7
      Environment:
        Variables:
          bucket_name:
            Ref: UploadBucketD2C1DA78
      MemorySize: 512
      Timeout: 900
    DependsOn:
      - EmptyBucketEmptyBucketLambdaServiceRoleDefaultPolicy0872AADF
      - EmptyBucketEmptyBucketLambdaServiceRole67452BDD
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/EmptyBucket/EmptyBucketLambda/Resource
  EmptyBucketEmptyBucketResource78AC492E:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - EmptyBucketEmptyBucketLambdaD0E9E93D
          - Arn
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/EmptyBucket/EmptyBucketResource
  UploadBucketTopic6C74B146:
    Type: AWS::SNS::Topic
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/UploadBucketTopic/Resource
  UploadBucketTopicPolicy6F32D507:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sns:Publish
            Condition:
              ArnLike:
                aws:SourceArn:
                  Fn::GetAtt:
                    - UploadBucketD2C1DA78
                    - Arn
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Resource:
              Ref: UploadBucketTopic6C74B146
            Sid: "0"
        Version: "2012-10-17"
      Topics:
        - Ref: UploadBucketTopic6C74B146
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/UploadBucketTopic/Policy/Resource
  newObjectInUploadBucketEventQueueBACA4EC1:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 300
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/newObjectInUploadBucketEventQueue/Resource
  newObjectInUploadBucketEventQueuePolicyA2F6C482:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sqs:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn:
                  Ref: UploadBucketTopic6C74B146
            Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Resource:
              Fn::GetAtt:
                - newObjectInUploadBucketEventQueueBACA4EC1
                - Arn
        Version: "2012-10-17"
      Queues:
        - Ref: newObjectInUploadBucketEventQueueBACA4EC1
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/newObjectInUploadBucketEventQueue/Policy/Resource
  newObjectInUploadBucketEventQueueS3NotificationLaunchStackUploadBucketTopic6BDA5CF510E4DFCF:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      TopicArn:
        Ref: UploadBucketTopic6C74B146
      Endpoint:
        Fn::GetAtt:
          - newObjectInUploadBucketEventQueueBACA4EC1
          - Arn
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/newObjectInUploadBucketEventQueue/S3NotificationLaunchStackUploadBucketTopic6BDA5CF5/Resource
  newObjectInUploadBucketSfnEventQueueB7B2B557:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 300
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/newObjectInUploadBucketSfnEventQueue/Resource
  newObjectInUploadBucketSfnEventQueuePolicy397EE93F:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sqs:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn:
                  Ref: UploadBucketTopic6C74B146
            Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Resource:
              Fn::GetAtt:
                - newObjectInUploadBucketSfnEventQueueB7B2B557
                - Arn
        Version: "2012-10-17"
      Queues:
        - Ref: newObjectInUploadBucketSfnEventQueueB7B2B557
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/newObjectInUploadBucketSfnEventQueue/Policy/Resource
  newObjectInUploadBucketSfnEventQueueS3NotificationLaunchStackUploadBucketTopic6BDA5CF5636C415A:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      TopicArn:
        Ref: UploadBucketTopic6C74B146
      Endpoint:
        Fn::GetAtt:
          - newObjectInUploadBucketSfnEventQueueB7B2B557
          - Arn
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/newObjectInUploadBucketSfnEventQueue/S3NotificationLaunchStackUploadBucketTopic6BDA5CF5/Resource
  deadLetterQueue3F848E28:
    Type: AWS::SQS::Queue
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/deadLetterQueue/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:PutBucketNotification
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      Roles:
        - Ref: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)
      Code:
        ZipFile: >-
          exports.handler = (event, context) => {
              // eslint-disable-next-line @typescript-eslint/no-require-imports, import/no-extraneous-dependencies
              const s3 = new (require('aws-sdk').S3)();
              // eslint-disable-next-line @typescript-eslint/no-require-imports
              const https = require('https');
              // eslint-disable-next-line @typescript-eslint/no-require-imports
              const url = require('url');
              log(JSON.stringify(event, undefined, 2));
              const props = event.ResourceProperties;
              if (event.RequestType === 'Delete') {
                  props.NotificationConfiguration = {}; // this is how you clean out notifications
              }
              const req = {
                  Bucket: props.BucketName,
                  NotificationConfiguration: props.NotificationConfiguration,
              };
              return s3.putBucketNotificationConfiguration(req, (err, data) => {
                  log({ err, data });
                  if (err) {
                      return submitResponse('FAILED', err.message + `\nMore information in CloudWatch Log Stream: ${context.logStreamName}`);
                  }
                  else {
                      return submitResponse('SUCCESS');
                  }
              });
              function log(obj) {
                  console.error(event.RequestId, event.StackId, event.LogicalResourceId, obj);
              }
              // tslint:disable-next-line:max-line-length
              // adapted from https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html#cfn-lambda-function-code-cfnresponsemodule
              // to allow sending an error messge as a reason.
              function submitResponse(responseStatus, reason) {
                  const responseBody = JSON.stringify({
                      Status: responseStatus,
                      Reason: reason || 'See the details in CloudWatch Log Stream: ' + context.logStreamName,
                      PhysicalResourceId: event.PhysicalResourceId || event.LogicalResourceId,
                      StackId: event.StackId,
                      RequestId: event.RequestId,
                      LogicalResourceId: event.LogicalResourceId,
                      NoEcho: false,
                  });
                  log({ responseBody });
                  const parsedUrl = url.parse(event.ResponseURL);
                  const options = {
                      hostname: parsedUrl.hostname,
                      port: 443,
                      path: parsedUrl.path,
                      method: 'PUT',
                      headers: {
                          'content-type': '',
                          'content-length': responseBody.length,
                      },
                  };
                  const request = https.request(options, (r) => {
                      log({ statusCode: r.statusCode, statusMessage: r.statusMessage });
                      context.done();
                  });
                  request.on('error', (error) => {
                      log({ sendError: error });
                      context.done();
                  });
                  request.write(responseBody);
                  request.end();
              }
          };
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
          - Arn
      Runtime: nodejs10.x
      Timeout: 300
    DependsOn:
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource
  Vpc8378EB38:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: S3NotificationLaunchStack/Vpc
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/Vpc/Resource
  VpcPublicSubnet1Subnet5C2D37C4:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/18
      VpcId:
        Ref: Vpc8378EB38
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: S3NotificationLaunchStack/Vpc/PublicSubnet1
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/Vpc/PublicSubnet1/Subnet
  VpcPublicSubnet1RouteTable6C95E38E:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      Tags:
        - Key: Name
          Value: S3NotificationLaunchStack/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/Vpc/PublicSubnet1/RouteTable
  VpcPublicSubnet1RouteTableAssociation97140677:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet1RouteTable6C95E38E
      SubnetId:
        Ref: VpcPublicSubnet1Subnet5C2D37C4
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/Vpc/PublicSubnet1/RouteTableAssociation
  VpcPublicSubnet1DefaultRoute3DA9E72A:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet1RouteTable6C95E38E
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VpcIGWD7BA715C
    DependsOn:
      - VpcVPCGWBF912B6E
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/Vpc/PublicSubnet1/DefaultRoute
  VpcPublicSubnet1EIPD7E02669:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: S3NotificationLaunchStack/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/Vpc/PublicSubnet1/EIP
  VpcPublicSubnet1NATGateway4D7517AA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - VpcPublicSubnet1EIPD7E02669
          - AllocationId
      SubnetId:
        Ref: VpcPublicSubnet1Subnet5C2D37C4
      Tags:
        - Key: Name
          Value: S3NotificationLaunchStack/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/Vpc/PublicSubnet1/NATGateway
  VpcPublicSubnet2Subnet691E08A3:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.64.0/18
      VpcId:
        Ref: Vpc8378EB38
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: S3NotificationLaunchStack/Vpc/PublicSubnet2
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/Vpc/PublicSubnet2/Subnet
  VpcPublicSubnet2RouteTable94F7E489:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      Tags:
        - Key: Name
          Value: S3NotificationLaunchStack/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/Vpc/PublicSubnet2/RouteTable
  VpcPublicSubnet2RouteTableAssociationDD5762D8:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet2RouteTable94F7E489
      SubnetId:
        Ref: VpcPublicSubnet2Subnet691E08A3
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/Vpc/PublicSubnet2/RouteTableAssociation
  VpcPublicSubnet2DefaultRoute97F91067:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet2RouteTable94F7E489
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VpcIGWD7BA715C
    DependsOn:
      - VpcVPCGWBF912B6E
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/Vpc/PublicSubnet2/DefaultRoute
  VpcPublicSubnet2EIP3C605A87:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: S3NotificationLaunchStack/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/Vpc/PublicSubnet2/EIP
  VpcPublicSubnet2NATGateway9182C01D:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - VpcPublicSubnet2EIP3C605A87
          - AllocationId
      SubnetId:
        Ref: VpcPublicSubnet2Subnet691E08A3
      Tags:
        - Key: Name
          Value: S3NotificationLaunchStack/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/Vpc/PublicSubnet2/NATGateway
  VpcPrivateSubnet1Subnet536B997A:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/18
      VpcId:
        Ref: Vpc8378EB38
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: S3NotificationLaunchStack/Vpc/PrivateSubnet1
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/Vpc/PrivateSubnet1/Subnet
  VpcPrivateSubnet1RouteTableB2C5B500:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      Tags:
        - Key: Name
          Value: S3NotificationLaunchStack/Vpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/Vpc/PrivateSubnet1/RouteTable
  VpcPrivateSubnet1RouteTableAssociation70C59FA6:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet1RouteTableB2C5B500
      SubnetId:
        Ref: VpcPrivateSubnet1Subnet536B997A
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/Vpc/PrivateSubnet1/RouteTableAssociation
  VpcPrivateSubnet1DefaultRouteBE02A9ED:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet1RouteTableB2C5B500
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VpcPublicSubnet1NATGateway4D7517AA
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/Vpc/PrivateSubnet1/DefaultRoute
  VpcPrivateSubnet2Subnet3788AAA1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.192.0/18
      VpcId:
        Ref: Vpc8378EB38
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: S3NotificationLaunchStack/Vpc/PrivateSubnet2
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/Vpc/PrivateSubnet2/Subnet
  VpcPrivateSubnet2RouteTableA678073B:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      Tags:
        - Key: Name
          Value: S3NotificationLaunchStack/Vpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/Vpc/PrivateSubnet2/RouteTable
  VpcPrivateSubnet2RouteTableAssociationA89CAD56:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet2RouteTableA678073B
      SubnetId:
        Ref: VpcPrivateSubnet2Subnet3788AAA1
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/Vpc/PrivateSubnet2/RouteTableAssociation
  VpcPrivateSubnet2DefaultRoute060D2087:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet2RouteTableA678073B
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VpcPublicSubnet2NATGateway9182C01D
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/Vpc/PrivateSubnet2/DefaultRoute
  VpcIGWD7BA715C:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: S3NotificationLaunchStack/Vpc
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/Vpc/IGW
  VpcVPCGWBF912B6E:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      InternetGatewayId:
        Ref: VpcIGWD7BA715C
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/Vpc/VPCGW
  Ec2ClusterEE43E89D:
    Type: AWS::ECS::Cluster
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/Ec2Cluster/Resource
  FargateTaskDefinitionTaskRoleE3C2BCAA:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/FargateTaskDefinition/TaskRole/Resource
  FargateTaskDefinitionTaskRoleDefaultPolicy798E9D9D:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: events:PutEvents
            Effect: Allow
            Resource: "*"
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - UploadBucketD2C1DA78
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - UploadBucketD2C1DA78
                        - Arn
                    - /*
        Version: "2012-10-17"
      PolicyName: FargateTaskDefinitionTaskRoleDefaultPolicy798E9D9D
      Roles:
        - Ref: FargateTaskDefinitionTaskRoleE3C2BCAA
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/FargateTaskDefinition/TaskRole/DefaultPolicy/Resource
  FargateTaskDefinition8E3B365E:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: S3_BUCKET_NAME
              Value:
                Ref: UploadBucketD2C1DA78
            - Name: S3_OBJECT_KEY
              Value: ""
          Essential: true
          Image:
            Fn::Join:
              - ""
              - - Ref: AWS::AccountId
                - .dkr.ecr.
                - Ref: AWS::Region
                - "."
                - Ref: AWS::URLSuffix
                - /aws-cdk/assets:01f4be8848768d1fd8a196f983ef64edcf31859e6a24a743c4fe808a5477cb9d
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: FargateTaskDefinitionAppContainerLogGroup20407D7C
              awslogs-stream-prefix: UploadBatchETL
              awslogs-region:
                Ref: AWS::Region
          Name: AppContainer
      Cpu: "256"
      ExecutionRoleArn:
        Fn::GetAtt:
          - FargateTaskDefinitionExecutionRoleE69A8E33
          - Arn
      Family: S3NotificationLaunchStackFargateTaskDefinitionE5214737
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - FargateTaskDefinitionTaskRoleE3C2BCAA
          - Arn
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/FargateTaskDefinition/Resource
  FargateTaskDefinitionAppContainerLogGroup20407D7C:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/FargateTaskDefinition/AppContainer/LogGroup/Resource
  FargateTaskDefinitionExecutionRoleE69A8E33:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/FargateTaskDefinition/ExecutionRole/Resource
  FargateTaskDefinitionExecutionRoleDefaultPolicy1632DA52:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":ecr:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :repository/aws-cdk/assets
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - FargateTaskDefinitionAppContainerLogGroup20407D7C
                - Arn
        Version: "2012-10-17"
      PolicyName: FargateTaskDefinitionExecutionRoleDefaultPolicy1632DA52
      Roles:
        - Ref: FargateTaskDefinitionExecutionRoleE69A8E33
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/FargateTaskDefinition/ExecutionRole/DefaultPolicy/Resource
  extractLambdaHandlerServiceRole8A50F829:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/extractLambdaHandler/ServiceRole/Resource
  extractLambdaHandlerServiceRoleDefaultPolicyB880CB8F:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - sqs:ReceiveMessage
              - sqs:ChangeMessageVisibility
              - sqs:GetQueueUrl
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - newObjectInUploadBucketEventQueueBACA4EC1
                - Arn
          - Action: events:PutEvents
            Effect: Allow
            Resource: "*"
          - Action: ecs:RunTask
            Effect: Allow
            Resource:
              Ref: FargateTaskDefinition8E3B365E
          - Action: iam:PassRole
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - FargateTaskDefinitionExecutionRoleE69A8E33
                  - Arn
              - Fn::GetAtt:
                  - FargateTaskDefinitionTaskRoleE3C2BCAA
                  - Arn
        Version: "2012-10-17"
      PolicyName: extractLambdaHandlerServiceRoleDefaultPolicyB880CB8F
      Roles:
        - Ref: extractLambdaHandlerServiceRole8A50F829
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/extractLambdaHandler/ServiceRole/DefaultPolicy/Resource
  extractLambdaHandlerD06B8F09:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: AssetParametersaadce975db1d6ea016e92611fb5d64a67b80dbad768e875183a0dff2b5c90e1eS3BucketF5779E40
        S3Key:
          Fn::Join:
            - ""
            - - Fn::Select:
                  - 0
                  - Fn::Split:
                      - "||"
                      - Ref: AssetParametersaadce975db1d6ea016e92611fb5d64a67b80dbad768e875183a0dff2b5c90e1eS3VersionKey0700CC3E
              - Fn::Select:
                  - 1
                  - Fn::Split:
                      - "||"
                      - Ref: AssetParametersaadce975db1d6ea016e92611fb5d64a67b80dbad768e875183a0dff2b5c90e1eS3VersionKey0700CC3E
      Handler: consumer.handler
      Role:
        Fn::GetAtt:
          - extractLambdaHandlerServiceRole8A50F829
          - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          CLUSTER_NAME:
            Ref: Ec2ClusterEE43E89D
          TASK_DEFINITION:
            Ref: FargateTaskDefinition8E3B365E
          SUBNETS:
            Fn::Join:
              - ""
              - - '["'
                - Ref: VpcPrivateSubnet1Subnet536B997A
                - '","'
                - Ref: VpcPrivateSubnet2Subnet3788AAA1
                - '"]'
          CONTAINER_NAME: AppContainer
      ReservedConcurrentExecutions: 2
    DependsOn:
      - extractLambdaHandlerServiceRoleDefaultPolicyB880CB8F
      - extractLambdaHandlerServiceRole8A50F829
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/extractLambdaHandler/Resource
      aws:asset:path: asset.aadce975db1d6ea016e92611fb5d64a67b80dbad768e875183a0dff2b5c90e1e
      aws:asset:property: Code
  extractLambdaHandlerSqsEventSourceS3NotificationLaunchStacknewObjectInUploadBucketEventQueue07950C3BF2620DA9:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn:
        Fn::GetAtt:
          - newObjectInUploadBucketEventQueueBACA4EC1
          - Arn
      FunctionName:
        Ref: extractLambdaHandlerD06B8F09
      BatchSize: 10
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/extractLambdaHandler/SqsEventSource:S3NotificationLaunchStacknewObjectInUploadBucketEventQueue07950C3B/Resource
  runTaskSecurityGroup3D1EEA60:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: S3NotificationLaunchStack/runTask/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/runTask/SecurityGroup/Resource
  stateMachineRole64DF9B42:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - states.
                    - Ref: AWS::Region
                    - .amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/stateMachine/Role/Resource
  stateMachineRoleDefaultPolicy9579E9AD:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: ecs:RunTask
            Effect: Allow
            Resource:
              Ref: FargateTaskDefinition8E3B365E
          - Action:
              - ecs:StopTask
              - ecs:DescribeTasks
            Effect: Allow
            Resource: "*"
          - Action: iam:PassRole
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - FargateTaskDefinitionTaskRoleE3C2BCAA
                  - Arn
              - Fn::GetAtt:
                  - FargateTaskDefinitionExecutionRoleE69A8E33
                  - Arn
          - Action:
              - events:PutTargets
              - events:PutRule
              - events:DescribeRule
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":events:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :rule/StepFunctionsGetEventsForECSTaskRule
          - Action: sqs:SendMessage
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - deadLetterQueue3F848E28
                - Arn
        Version: "2012-10-17"
      PolicyName: stateMachineRoleDefaultPolicy9579E9AD
      Roles:
        - Ref: stateMachineRole64DF9B42
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/stateMachine/Role/DefaultPolicy/Resource
  stateMachineE926C166:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        Fn::Join:
          - ""
          - - '{"StartAt":"runTask","States":{"runTask":{"End":true,"Catch":[{"ErrorEquals":["States.ALL"],"ResultPath":"$.ErrorInfo","Next":"retry"}],"Parameters":{"Cluster":"'
            - Fn::GetAtt:
                - Ec2ClusterEE43E89D
                - Arn
            - '","TaskDefinition":"'
            - Ref: FargateTaskDefinition8E3B365E
            - '","NetworkConfiguration":{"AwsvpcConfiguration":{"Subnets":["'
            - Ref: VpcPrivateSubnet1Subnet536B997A
            - '","'
            - Ref: VpcPrivateSubnet2Subnet3788AAA1
            - '"],"SecurityGroups":["'
            - Fn::GetAtt:
                - runTaskSecurityGroup3D1EEA60
                - GroupId
            - '"]}},"Overrides":{"ContainerOverrides":[{"Name":"AppContainer","Environment":[{"Name":"BODY","Value.$":"$.Record.body"},{"Name":"EXECUTION_ID","Value.$":"$$.Execution.Id"},{"Name":"S3_BUCKET_NAME","Value":"'
            - Ref: UploadBucketD2C1DA78
            - '"},{"Name":"S3_OBJECT_KEY","Value.$":"$.Record.body.s3.object.key"}]}]},"LaunchType":"FARGATE"},"Type":"Task","Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::ecs:runTask.sync"},"retry":{"End":true,"Parameters":{"QueueUrl":"
            - Ref: deadLetterQueue3F848E28
            - '","MessageBody.$":"$.Record.body"},"Type":"Task","Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::sqs:sendMessage"}}}
      RoleArn:
        Fn::GetAtt:
          - stateMachineRole64DF9B42
          - Arn
    DependsOn:
      - stateMachineRoleDefaultPolicy9579E9AD
      - stateMachineRole64DF9B42
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/stateMachine/Resource
  startMachineServiceRole929531EB:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/startMachine/ServiceRole/Resource
  startMachineServiceRoleDefaultPolicy9EDE778D:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - sqs:ReceiveMessage
              - sqs:ChangeMessageVisibility
              - sqs:GetQueueUrl
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - newObjectInUploadBucketSfnEventQueueB7B2B557
                - Arn
          - Action: states:StartExecution
            Effect: Allow
            Resource:
              Ref: stateMachineE926C166
        Version: "2012-10-17"
      PolicyName: startMachineServiceRoleDefaultPolicy9EDE778D
      Roles:
        - Ref: startMachineServiceRole929531EB
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/startMachine/ServiceRole/DefaultPolicy/Resource
  startMachineEE0FD05E:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: AssetParametersf73d2d95ebeb2a9039989fef3af32794c2b556b30d53537cb4bb8c6454630199S3Bucket13438F77
        S3Key:
          Fn::Join:
            - ""
            - - Fn::Select:
                  - 0
                  - Fn::Split:
                      - "||"
                      - Ref: AssetParametersf73d2d95ebeb2a9039989fef3af32794c2b556b30d53537cb4bb8c6454630199S3VersionKeyF81405BD
              - Fn::Select:
                  - 1
                  - Fn::Split:
                      - "||"
                      - Ref: AssetParametersf73d2d95ebeb2a9039989fef3af32794c2b556b30d53537cb4bb8c6454630199S3VersionKeyF81405BD
      Handler: consumer.handler
      Role:
        Fn::GetAtt:
          - startMachineServiceRole929531EB
          - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          STATE_MACHINE_ARN:
            Ref: stateMachineE926C166
    DependsOn:
      - startMachineServiceRoleDefaultPolicy9EDE778D
      - startMachineServiceRole929531EB
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/startMachine/Resource
      aws:asset:path: asset.f73d2d95ebeb2a9039989fef3af32794c2b556b30d53537cb4bb8c6454630199
      aws:asset:property: Code
  startMachineSqsEventSourceS3NotificationLaunchStacknewObjectInUploadBucketSfnEventQueue43D129D6405AA4C3:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn:
        Fn::GetAtt:
          - newObjectInUploadBucketSfnEventQueueB7B2B557
          - Arn
      FunctionName:
        Ref: startMachineEE0FD05E
      BatchSize: 10
    Metadata:
      aws:cdk:path: S3NotificationLaunchStack/startMachine/SqsEventSource:S3NotificationLaunchStacknewObjectInUploadBucketSfnEventQueue43D129D6/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=1.37.0,@aws-cdk/assets=1.36.1,@aws-cdk/aws-apigateway=1.36.1,@aws-cdk/aws-applicationautoscaling=1.36.1,@aws-cdk/aws-autoscaling=1.36.1,@aws-cdk/aws-autoscaling-common=1.36.1,@aws-cdk/aws-autoscaling-hooktargets=1.36.1,@aws-cdk/aws-cloudformation=1.36.1,@aws-cdk/aws-cloudwatch=1.36.1,@aws-cdk/aws-ec2=1.36.1,@aws-cdk/aws-ecr=1.36.1,@aws-cdk/aws-ecr-assets=1.36.1,@aws-cdk/aws-ecs=1.36.1,@aws-cdk/aws-elasticloadbalancingv2=1.36.1,@aws-cdk/aws-events=1.36.1,@aws-cdk/aws-iam=1.36.1,@aws-cdk/aws-kms=1.36.1,@aws-cdk/aws-lambda=1.36.1,@aws-cdk/aws-lambda-event-sources=1.36.1,@aws-cdk/aws-logs=1.36.1,@aws-cdk/aws-s3=1.36.1,@aws-cdk/aws-s3-assets=1.36.1,@aws-cdk/aws-s3-notifications=1.36.1,@aws-cdk/aws-servicediscovery=1.36.1,@aws-cdk/aws-sns=1.36.1,@aws-cdk/aws-sns-subscriptions=1.36.1,@aws-cdk/aws-sqs=1.36.1,@aws-cdk/aws-ssm=1.36.1,@aws-cdk/aws-stepfunctions=1.36.1,@aws-cdk/aws-stepfunctions-tasks=1.36.1,@aws-cdk/cloud-assembly-schema=1.36.1,@aws-cdk/core=1.36.1,@aws-cdk/cx-api=1.36.1,@aws-cdk/region-info=1.36.1,jsii-runtime=node.js/v12.14.1
    Condition: CDKMetadataAvailable
Parameters:
  AssetParametersaadce975db1d6ea016e92611fb5d64a67b80dbad768e875183a0dff2b5c90e1eS3BucketF5779E40:
    Type: String
    Description: S3 bucket for asset "aadce975db1d6ea016e92611fb5d64a67b80dbad768e875183a0dff2b5c90e1e"
  AssetParametersaadce975db1d6ea016e92611fb5d64a67b80dbad768e875183a0dff2b5c90e1eS3VersionKey0700CC3E:
    Type: String
    Description: S3 key for asset version "aadce975db1d6ea016e92611fb5d64a67b80dbad768e875183a0dff2b5c90e1e"
  AssetParametersaadce975db1d6ea016e92611fb5d64a67b80dbad768e875183a0dff2b5c90e1eArtifactHash2AB34AA9:
    Type: String
    Description: Artifact hash for asset "aadce975db1d6ea016e92611fb5d64a67b80dbad768e875183a0dff2b5c90e1e"
  AssetParametersf73d2d95ebeb2a9039989fef3af32794c2b556b30d53537cb4bb8c6454630199S3Bucket13438F77:
    Type: String
    Description: S3 bucket for asset "f73d2d95ebeb2a9039989fef3af32794c2b556b30d53537cb4bb8c6454630199"
  AssetParametersf73d2d95ebeb2a9039989fef3af32794c2b556b30d53537cb4bb8c6454630199S3VersionKeyF81405BD:
    Type: String
    Description: S3 key for asset version "f73d2d95ebeb2a9039989fef3af32794c2b556b30d53537cb4bb8c6454630199"
  AssetParametersf73d2d95ebeb2a9039989fef3af32794c2b556b30d53537cb4bb8c6454630199ArtifactHashBCC2BB74:
    Type: String
    Description: Artifact hash for asset "f73d2d95ebeb2a9039989fef3af32794c2b556b30d53537cb4bb8c6454630199"
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2

